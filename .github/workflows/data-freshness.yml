name: Data Freshness Pipeline

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    # Allow manual triggering
  push:
    paths:
      - 'configs/data_sources.yaml'
      - 'src/data_collectors/**'
      - '.github/workflows/data-freshness.yml'

jobs:
  check-data-freshness:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Check data freshness
      run: |
        python scripts/check_data_freshness.py
        
    - name: Create issue if data is stale
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Data freshness check failed',
            body: 'The automated data freshness check has detected that the knowledge base may be outdated. Please review and update the data sources.',
            labels: ['data-freshness', 'automation']
          })

  collect-data:
    needs: check-data-freshness
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Collect data from sources
      run: |
        python scripts/collect_data.py --all-sources
        
    - name: Upload collected data
      uses: actions/upload-artifact@v3
      with:
        name: collected-data
        path: data/raw/
        retention-days: 7

  rebuild-index:
    needs: collect-data
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download collected data
      uses: actions/download-artifact@v3
      with:
        name: collected-data
        path: data/raw/
        
    - name: Rebuild vector index
      run: |
        python scripts/rebuild_index.py
        
    - name: Upload new index
      uses: actions/upload-artifact@v3
      with:
        name: vector-index
        path: models/
        retention-days: 30

  test-new-index:
    needs: rebuild-index
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download new index
      uses: actions/download-artifact@v3
      with:
        name: vector-index
        path: models/
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v
        
    - name: Run integration tests
      run: |
        python scripts/test_index_quality.py

  deploy:
    needs: [rebuild-index, test-new-index]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Download new index
      uses: actions/download-artifact@v3
      with:
        name: vector-index
        path: models/
        
    - name: Deploy to production
      run: |
        python scripts/deploy_index.py
        
    - name: Notify deployment
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Knowledge base updated successfully',
            body: 'The automated data freshness pipeline has successfully updated the knowledge base with fresh data.',
            labels: ['deployment', 'automation', 'success']
          }) 